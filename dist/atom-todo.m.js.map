{"version":3,"file":"atom-todo.m.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/todo-input/index.js","../src/todo-item/index.js","../src/index.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { h, Element } from \"atomico\";\r\nimport style from \"./style.css\";\r\n\r\nexport default class extends Element {\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({ mode: \"open\" });\r\n    }\r\n    static get props() {\r\n        return [\"placeholder\"];\r\n    }\r\n    render() {\r\n        return (\r\n            <form\r\n                submit={event => {\r\n                    event.preventDefault();\r\n                    this.dispatch(\"create\", {\r\n                        text: event.target.task.value\r\n                    });\r\n                    event.target.reset();\r\n                }}\r\n            >\r\n                <style>{style}</style>\r\n                <input\r\n                    name=\"task\"\r\n                    type=\"text\"\r\n                    placeholder={this.props.placeholder}\r\n                />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n","import { h, Element } from \"atomico\";\r\nimport style from \"./style.css\";\r\nexport default class extends Element {\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({ mode: \"open\" });\r\n    }\r\n    static get props() {\r\n        return [\"text\", \"checked\"];\r\n    }\r\n    render() {\r\n        return (\r\n            <div class=\"group\">\r\n                <style>{style}</style>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    change={() => {\r\n                        this.dispatch(\"toggle\");\r\n                    }}\r\n                    checked={this.props.checked}\r\n                />\r\n                <div class=\"text\">{this.props.text}</div>\r\n                <button\r\n                    click={() => {\r\n                        this.dispatch(\"remove\");\r\n                    }}\r\n                >\r\n                    x\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { h, Element } from \"atomico\";\nimport TagInput from \"./todo-input\";\nimport TagItem from \"./todo-item\";\n\nimport style from \"./style.css\";\n\nexport const TAG_TODO = \"atom-todo\";\nexport const TAG_ITEM = \"atom-todo-item\";\nexport const TAG_INPUT = \"atom-todo-input\";\n\nexport default class TagTodo extends Element {\n    constructor() {\n        super();\n        this.attachShadow({ mode: \"open\" });\n        this.state.list = [\n            { text: \"my initial todo\", checked: false },\n            { text: \"Learn about Web Components\", checked: true }\n        ];\n    }\n    render() {\n        let { list = [] } = this.state;\n        return (\n            <div class=\"group\">\n                <style>{style}</style>\n                <atom-todo-input\n                    placeholder=\"What needs to be done?\"\n                    create={({ detail }) => {\n                        this.setState({\n                            list: list.concat({\n                                text: detail.text,\n                                checked: false\n                            })\n                        });\n                    }}\n                />\n                <div>\n                    {list.map(({ text, checked }, localIndex) => (\n                        <atom-todo-item\n                            text={text}\n                            checked={checked}\n                            remove={() => {\n                                this.setState({\n                                    list: list.filter(\n                                        (data, index) => index !== localIndex\n                                    )\n                                });\n                            }}\n                            toggle={() => {\n                                this.setState({\n                                    list: list.map(\n                                        (data, index) =>\n                                            index === localIndex\n                                                ? {\n                                                      ...data,\n                                                      checked: !data.checked\n                                                  }\n                                                : data\n                                    )\n                                });\n                            }}\n                        />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\ncustomElements.define(TAG_ITEM, TagItem);\ncustomElements.define(TAG_INPUT, TagInput);\ncustomElements.define(TAG_TODO, TagTodo);\n"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","Element","[object Object]","super","this","attachShadow","mode","props","h","submit","event","preventDefault","dispatch","text","target","task","value","reset","name","placeholder","class","change","checked","click","TAG_TODO","TAG_ITEM","TAG_INPUT","TagTodo","state","list","create","setState","concat","detail","map","localIndex","remove","filter","data","index","toggle","Object","customElements","define","TagItem","TagInput"],"mappings":"+BAAA,SAASA,YAAYC,EAAKC,QACX,IAARA,IAAiBA,EAAM,IAC5B,IAAIC,EAAWD,EAAIC,SAEnB,GAAKF,GAA2B,oBAAbG,SAAnB,CAEA,IAAIC,EAAOD,SAASC,MAAQD,SAASE,qBAAqB,QAAQ,GAC9DC,EAAQH,SAASI,cAAc,SACnCD,EAAME,KAAO,WAEI,QAAbN,GACEE,EAAKK,WACPL,EAAKM,aAAaJ,EAAOF,EAAKK,YAKhCL,EAAKO,YAAYL,GAGfA,EAAMM,WACRN,EAAMM,WAAWC,QAAUb,EAE3BM,EAAMK,YAAYR,SAASW,eAAed,uOCpBjBe,QACzBC,cACIC,QACAC,KAAKC,aAAa,CAAEC,KAAM,SAE9BC,mBACI,MAAO,CAAC,eAEZL,oBACI,OACIM,UACIC,gBAAQC,GACJA,EAAMC,iBACNP,EAAKQ,SAAS,SAAU,CACpBC,KAAMH,EAAMI,OAAOC,KAAKC,QAE5BN,EAAMI,OAAOG,UAGjBT,eAAQhB,KACRgB,WACIU,KAAK,OACLxB,KAAK,OACLyB,YAAaf,KAAKG,MAAMY,w6BCxBflB,QACzBC,cACIC,QACAC,KAAKC,aAAa,CAAEC,KAAM,SAE9BC,mBACI,MAAO,CAAC,OAAQ,WAEpBL,oBACI,OACIM,SAAKY,MAAM,SACPZ,eAAQhB,OACRgB,WACId,KAAK,WACL2B,kBACIjB,EAAKQ,SAAS,WAElBU,QAASlB,KAAKG,MAAMe,UAExBd,SAAKY,MAAM,QAAQhB,KAAKG,MAAMM,MAC9BL,YACIe,iBACInB,EAAKQ,SAAS,YAErB,gKCpBL,IAACY,SAAW,YACXC,SAAW,iBACXC,UAAY,kBAEV,MAAMC,gBAAgB1B,QACjCC,cACIC,QACAC,KAAKC,aAAa,CAAEC,KAAM,SAC1BF,KAAKwB,MAAMC,KAAO,CACd,CAAEhB,KAAM,kBAAmBS,SAAS,GACpC,CAAET,KAAM,6BAA8BS,SAAS,IAGvDpB,sBACwBE,KAAKwB,WACzB,sBADa,IAETpB,SAAKY,MAAM,SACPZ,eAAQhB,OACRgB,qBACIW,YAAY,yBACZW,gBAAS3C,kBACLiB,EAAK2B,SAAS,CACVF,KAAMA,EAAKG,OAAO,CACdnB,KAAMoB,EAAOpB,KACbS,SAAS,SAKzBd,aACIqB,EAAMK,aAAK/C,EAAmBgD,mCAC1B3B,oBACIK,KAAMA,EACNS,QAASA,EACTc,kBACIhC,EAAK2B,SAAS,CACVF,KAAMA,EAAKQ,gBACNC,EAAMC,UAAUA,IAAUJ,OAIvCK,kBACIpC,EAAK2B,SAAS,CACVF,KAAMA,EAAKK,aACNI,EAAMC,UACHA,IAAUJ,EACJM,iBACOH,GACHhB,SAAUgB,EAAKhB,UAEnBgB,cAYlDI,eAAeC,OAAOlB,SAAUmB,SAChCF,eAAeC,OAAOjB,UAAWmB,UACjCH,eAAeC,OAAOnB,SAAUG"}